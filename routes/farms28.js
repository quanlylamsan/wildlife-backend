const express = require('express');
const router = express.Router();
const Farm = require('../models/Farm'); // Import Farm Model
const { verifyToken, isAdmin } = require('../middleware/authMiddleware'); // Import verifyToken v√† isAdmin

// ‚ûï T·∫°o c∆° s·ªü g√¢y nu√¥i m·ªõi (ch·ªâ admin c√≥ th·ªÉ t·∫°o)
router.post('/', verifyToken, isAdmin, async (req, res) => {
  try {
    const { 
      tenCoSo, tinhThanhPho, xaPhuong, diaChiCoSo, 
      tenNguoiDaiDien, soCCCD,
      vido, kinhdo, 
      ngayThanhLap, giayPhepKinhDoanh, ghiChu,
      namSinh, ngayCapCCCD, noiCapCCCD, 
      soDienThoaiNguoiDaiDien, diaChiNguoiDaiDien, 
      mucDichNuoi, hinhThucNuoi, maSoCoSoGayNuoi, tongDan, 
      loaiHinhKinhDoanhGo, nganhNgheKinhDoanhGo, khoiLuong,
      loaiCoSoDangKy,
      tenLamSan, tenKhoaHoc,
      issueDate, expiryDate,
      trangThai,
      loaiHinhCheBienGo,
      nguonGocGo
    } = req.body;

    const existingFarm = await Farm.findOne({
      tenCoSo: tenCoSo,
      tinhThanhPho: tinhThanhPho,
      xaPhuong: xaPhuong,
      diaChiCoSo: diaChiCoSo,
      tenNguoiDaiDien: tenNguoiDaiDien,
      soCCCD: soCCCD
    });

    if (existingFarm) {
      return res.status(409).json({
        message: 'C∆° s·ªü v·ªõi c√°c th√¥ng tin ch√≠nh ƒë√£ t·ªìn t·∫°i.',
        farmId: existingFarm._id
      });
    }

    const newFarm = new Farm(req.body);
    const savedFarm = await newFarm.save();
    res.status(201).json(savedFarm);
  } catch (err) {
    console.error('L·ªói khi t·∫°o c∆° s·ªü m·ªõi:', err);
    if (err.name === 'ValidationError') {
      let errors = {};
      for (let field in err.errors) {
        errors[field] = err.errors[field].message;
      }
      return res.status(400).json({ message: 'L·ªói x√°c th·ª±c d·ªØ li·ªáu', errors });
    }
    res.status(500).json({ message: 'L·ªói server n·ªôi b·ªô khi t·∫°o c∆° s·ªü m·ªõi.' });
  }
});


// Route ƒë·ªÉ t·∫£i l√™n h√†ng lo·∫°t (BULK UPLOAD)
router.post('/bulk', verifyToken, isAdmin, async (req, res) => {
  const farmsData = req.body;
  const savedFarms = [];
  const errors = [];

  if (!Array.isArray(farmsData) || farmsData.length === 0) {
    return res.status(400).json({ message: 'Kh√¥ng c√≥ d·ªØ li·ªáu h·ª£p l·ªá ƒë·ªÉ t·∫£i l√™n.' });
  }

  for (const [index, farmData] of farmsData.entries()) {
    try {
      const existingFarm = await Farm.findOne({
        tenCoSo: farmData.tenCoSo,
        tinhThanhPho: farmData.tinhThanhPho,
        xaPhuong: farmData.xaPhuong,
        diaChiCoSo: farmData.diaChiCoSo,
        tenNguoiDaiDien: farmData.tenNguoiDaiDien,
        soCCCD: farmData.soCCCD
      });

      if (existingFarm) {
        errors.push({
          index: index,
          type: 'duplicate',
          message: `C∆° s·ªü '${farmData.tenCoSo}' ƒë√£ t·ªìn t·∫°i.`,
          farmId: existingFarm._id
        });
        continue;
      }

      const newFarm = new Farm(farmData);
      const savedFarm = await newFarm.save();
      savedFarms.push(savedFarm);

    } catch (err) {
      errors.push({
        index: index,
        type: 'validation',
        message: err.message
      });
    }
  }

  if (errors.length > 0) {
    return res.status(400).json({
      message: 'C√≥ l·ªói x·∫£y ra trong qu√° tr√¨nh t·∫£i l√™n h√†ng lo·∫°t.',
      savedCount: savedFarms.length,
      errors: errors
    });
  }

  res.status(201).json({
    message: `T·∫£i l√™n th√†nh c√¥ng ${savedFarms.length} c∆° s·ªü.`,
    savedFarms: savedFarms
  });
});

// L·∫•y danh s√°ch c∆° s·ªü c√≥ ph√¢n trang v√† b·ªô l·ªçc
router.get('/', verifyToken, async (req, res) => {
  try {
    const { 
      page = 1, 
      limit = 15, 
      farmType, 
      trangThai,
      tinhThanhPho,
      xaPhuong,
      nganhNgheKinhDoanhGo,
      loaiHinhCheBienGo,
      nguonGocGo,
      search
    } = req.query;

    const query = {};

    if (farmType) query.loaiCoSoDangKy = farmType;
    if (trangThai) query.trangThai = trangThai;
    if (tinhThanhPho) query.tinhThanhPho = tinhThanhPho;
    if (xaPhuong) query.xaPhuong = xaPhuong;
    if (nganhNgheKinhDoanhGo) query.nganhNgheKinhDoanhGo = nganhNgheKinhDoanhGo;
    if (loaiHinhCheBienGo) query.loaiHinhCheBienGo = loaiHinhCheBienGo;
    if (nguonGocGo) query.nguonGocGo = nguonGocGo;

    if (search) {
      const searchRegex = new RegExp(search, 'i');
      query.$or = [
        { tenCoSo: searchRegex },
        { diaChiCoSo: searchRegex },
        { tenNguoiDaiDien: searchRegex },
        { soCCCD: searchRegex },
        { 'products.tenLamSan': searchRegex }
      ];
    }

    const skip = (parseInt(page, 10) - 1) * parseInt(limit, 10);
    
    const farms = await Farm.find(query)
                            .sort({ createdAt: -1 })
                            .skip(skip)
                            .limit(parseInt(limit, 10));
    
    const totalDocs = await Farm.countDocuments(query);
    const totalPages = Math.ceil(totalDocs / parseInt(limit, 10));

    res.status(200).json({
      docs: farms,
      totalDocs,
      limit: parseInt(limit, 10),
      page: parseInt(page, 10),
      totalPages,
    });

  } catch (err) {
    console.error('L·ªói khi l·∫•y danh s√°ch c∆° s·ªü:', err);
    res.status(500).json({ message: 'L·ªói server n·ªôi b·ªô khi l·∫•y danh s√°ch c∆° s·ªü.' });
  }
});

// üîç L·∫•y m·ªôt c∆° s·ªü theo ID
router.get('/:id', verifyToken, async (req, res) => {
  try {
    const farm = await Farm.findById(req.params.id);
    if (!farm) {
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y c∆° s·ªü.' });
    }
    res.status(200).json(farm);
  } catch (err) {
    console.error('L·ªói khi l·∫•y c∆° s·ªü theo ID:', err);
    res.status(500).json({ message: 'L·ªói server n·ªôi b·ªô.' });
  }
});

// ‚ûï Th√™m m·ªôt l√¢m s·∫£n m·ªõi v√†o m·ªôt c∆° s·ªü ƒë√£ c√≥ (ch·ªâ admin)
router.post('/:farmId/products', verifyToken, isAdmin, async (req, res) => {
  try {
    const { farmId } = req.params;
    const farm = await Farm.findById(farmId);

    if (!farm) {
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y c∆° s·ªü ƒë·ªÉ th√™m l√¢m s·∫£n.' });
    }

    // *** S·ª¨A L·ªñI: Ki·ªÉm tra v√† kh·ªüi t·∫°o m·∫£ng products n·∫øu n√≥ kh√¥ng t·ªìn t·∫°i ***
    if (!farm.products) {
        farm.products = [];
    }

    // Th√™m ƒë·ªëi t∆∞·ª£ng l√¢m s·∫£n m·ªõi v√†o m·∫£ng 'products' c·ªßa c∆° s·ªü
    farm.products.push(req.body);

    const updatedFarm = await farm.save();

    res.status(201).json(updatedFarm);

  } catch (err) {
    console.error('L·ªói khi th√™m l√¢m s·∫£n v√†o c∆° s·ªü:', err);
    if (err.name === 'ValidationError') {
      return res.status(400).json({ message: 'D·ªØ li·ªáu l√¢m s·∫£n kh√¥ng h·ª£p l·ªá.', errors: err.errors });
    }
    res.status(500).json({ message: 'L·ªói server n·ªôi b·ªô khi th√™m l√¢m s·∫£n.' });
  }
});


// ‚úèÔ∏è C·∫≠p nh·∫≠t m·ªôt c∆° s·ªü (ch·ªâ admin c√≥ th·ªÉ c·∫≠p nh·∫≠t)
router.put('/:id', verifyToken, isAdmin, async (req, res) => {
  try {
    const updatedFarm = await Farm.findByIdAndUpdate(req.params.id, req.body, { new: true, runValidators: true });
    if (!updatedFarm) {
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y c∆° s·ªü ƒë·ªÉ c·∫≠p nh·∫≠t.' });
    }
    res.status(200).json(updatedFarm);
  } catch (err) {
    console.error('L·ªói khi c·∫≠p nh·∫≠t c∆° s·ªü:', err);
    if (err.name === 'ValidationError') {
      let errors = {};
      for (let field in err.errors) {
        errors[field] = err.errors[field].message;
      }
      return res.status(400).json({ message: 'L·ªói x√°c th·ª±c d·ªØ li·ªáu', errors });
    }
    res.status(500).json({ message: 'L·ªói server n·ªôi b·ªô khi c·∫≠p nh·∫≠t c∆° s·ªü.' });
  }
});

// üóëÔ∏è X√≥a m·ªôt c∆° s·ªü (ch·ªâ admin c√≥ th·ªÉ x√≥a)
router.delete('/:id', verifyToken, isAdmin, async (req, res) => {
  try {
    const deletedFarm = await Farm.findByIdAndDelete(req.params.id);
    if (!deletedFarm) {
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y c∆° s·ªü ƒë·ªÉ x√≥a.' });
    }
    res.status(200).json({ message: 'C∆° s·ªü ƒë√£ ƒë∆∞·ª£c x√≥a th√†nh c√¥ng.' });
  } catch (err) {
    console.error('L·ªói khi x√≥a c∆° s·ªü:', err);
    res.status(500).json({ message: 'L·ªói server n·ªôi b·ªô khi x√≥a c∆° s·ªü.' });
  }
});

module.exports = router;