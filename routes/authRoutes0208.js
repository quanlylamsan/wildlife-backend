const express = require('express');
const router = express.Router();
const User = require('../models/User');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const { protect } = require('../middleware/authMiddleware'); // <-- S·ª≠ d·ª•ng middleware b·∫°n ƒë√£ vi·∫øt

// Route ƒëƒÉng nh·∫≠p (ƒë√£ c√≥)
router.post('/login', async (req, res) => {
  const { email, password } = req.body;
  try {
    const user = await User.findOne({ email });
    if (!user) return res.status(400).json({ message: 'Email ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng.' });

    const isMatch = await bcrypt.compare(password, user.password);
    if (!isMatch) return res.status(400).json({ message: 'Email ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng.' });

    const token = jwt.sign(
      { id: user._id, role: user.role },
      process.env.JWT_SECRET,
      { expiresIn: '1h' }
    );

    res.json({ token, role: user.role });
  } catch (err) {
    console.error('L·ªói khi ƒëƒÉng nh·∫≠p:', err);
    res.status(500).json({ message: 'L·ªói server khi ƒëƒÉng nh·∫≠p.' });
  }
});

// üÜï Route l·∫•y th√¥ng tin ng∆∞·ªùi d√πng t·ª´ token
router.get('/me', protect, async (req, res) => {
  try {
    res.json(req.user); // `req.user` ƒë√£ ƒë∆∞·ª£c middleware `protect` g√°n ·ªü b∆∞·ªõc tr∆∞·ªõc
  } catch (error) {
    res.status(500).json({ message: 'L·ªói khi l·∫•y th√¥ng tin ng∆∞·ªùi d√πng.' });
  }
});

module.exports = router;
