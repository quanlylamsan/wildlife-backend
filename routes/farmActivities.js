// backend/routes/farmActivities.js
const express = require('express');
const router = express.Router();
const FarmActivity = require('../models/FarmActivity'); // Import FarmActivity Model
const { protect, isAdmin } = require('../middleware/authMiddleware'); // S·ª≠a t√™n middleware cho ƒë√∫ng

// ‚ûï T·∫°o b·∫£n ghi theo d√µi m·ªõi cho m·ªôt c∆° s·ªü g√¢y nu√¥i
router.post('/', protect, async (req, res) => {
  // Ki·ªÉm tra quy·ªÅn (v√≠ d·ª•: staff ho·∫∑c admin)
  if (req.user.role !== 'admin' && req.user.role !== 'staff') {
    return res.status(403).json({ message: 'B·∫°n kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán h√†nh ƒë·ªông n√†y' });
  }

  try {
    const newActivity = new FarmActivity(req.body);
    await newActivity.save();
    res.status(201).json(newActivity);
  } catch (err) {
    console.error('POST /api/farm-activities error:', err);
    if (err.name === 'ValidationError') {
      return res.status(400).json({ message: 'L·ªói d·ªØ li·ªáu ƒë·∫ßu v√†o', errors: err.errors });
    }
    res.status(500).json({ message: 'L·ªói server khi t·∫°o b·∫£n ghi theo d√µi', error: err.message });
  }
});

// üîé L·∫•y to√†n b·ªô b·∫£n ghi theo d√µi cho m·ªôt c∆° s·ªü c·ª• th·ªÉ
router.get('/:farmId', protect, async (req, res) => { // L·∫•y farmId t·ª´ URL
  try {
    // ‚úÖ S·ª≠a l·ªói: T√¨m ki·∫øm FarmActivity theo farmId, kh√¥ng ph·∫£i Farm
    const activities = await FarmActivity.find({ farm: req.params.farmId }).sort({ date: 1 });
    res.json(activities);
  } catch (err) {
    console.error('GET /api/farm-activities/:farmId error:', err);
    if (err.name === 'CastError') { // X·ª≠ l√Ω l·ªói n·∫øu farmId kh√¥ng h·ª£p l·ªá
      return res.status(400).json({ message: 'ID c∆° s·ªü nu√¥i kh√¥ng h·ª£p l·ªá.' });
    }
    res.status(500).json({ message: 'L·ªói server khi l·∫•y danh s√°ch b·∫£n ghi theo d√µi', error: err.message });
  }
});

// üîé L·∫•y m·ªôt b·∫£n ghi theo d√µi b·∫±ng ID
router.get('/detail/:id', protect, async (req, res) => {
  try {
    const activity = await FarmActivity.findById(req.params.id);
    if (!activity) {
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y b·∫£n ghi theo d√µi' });
    }
    res.json(activity);
  } catch (err) {
    console.error('GET /api/farm-activities/detail/:id error:', err);
    if (err.name === 'CastError') {
      return res.status(400).json({ message: 'ID b·∫£n ghi theo d√µi kh√¥ng h·ª£p l·ªá.' });
    }
    res.status(500).json({ message: 'L·ªói server khi l·∫•y th√¥ng tin b·∫£n ghi theo d√µi', error: err.message });
  }
});

// ‚úèÔ∏è C·∫≠p nh·∫≠t m·ªôt b·∫£n ghi theo d√µi (ch·ªâ admin ho·∫∑c staff c√≥ quy·ªÅn)
router.put('/:id', protect, async (req, res) => {
  if (req.user.role !== 'admin' && req.user.role !== 'staff') {
    return res.status(403).json({ message: 'B·∫°n kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán h√†nh ƒë·ªông n√†y' });
  }
  try {
    const updatedActivity = await FarmActivity.findByIdAndUpdate(
      req.params.id,
      req.body,
      { new: true, runValidators: true }
    );
    if (!updatedActivity) {
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y b·∫£n ghi theo d√µi ƒë·ªÉ c·∫≠p nh·∫≠t' });
    }
    res.json(updatedActivity);
  } catch (err) {
    console.error('PUT /api/farm-activities/:id error:', err);
    if (err.name === 'ValidationError') {
      return res.status(400).json({ message: 'L·ªói d·ªØ li·ªáu ƒë·∫ßu v√†o', errors: err.errors });
    }
    res.status(500).json({ message: 'L·ªói server khi c·∫≠p nh·∫≠t b·∫£n ghi theo d√µi', error: err.message });
  }
});

// ‚ùå X√≥a m·ªôt b·∫£n ghi theo d√µi (ch·ªâ admin)
router.delete('/:id', protect, isAdmin, async (req, res) => { // D√πng isAdmin ·ªü ƒë√¢y
  try {
    const deletedActivity = await FarmActivity.findByIdAndDelete(req.params.id);
    if (!deletedActivity) {
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y b·∫£n ghi theo d√µi ƒë·ªÉ x√≥a' });
    }
    res.json({ message: 'X√≥a b·∫£n ghi theo d√µi th√†nh c√¥ng' });
  } catch (err) {
      console.error('DELETE /api/farm-activities/:id error:', err);
      if (err.name === 'CastError') {
        return res.status(400).json({ message: 'ID b·∫£n ghi theo d√µi kh√¥ng h·ª£p l·ªá.' });
      }
      res.status(500).json({ message: 'L·ªói server khi x√≥a b·∫£n ghi theo d√µi', error: err.message });
  }
});

module.exports = router;
