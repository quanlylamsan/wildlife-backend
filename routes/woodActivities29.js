// backend/routes/woodActivities.js
const express = require('express');
const router = express.Router();
const WoodActivity = require('../models/WoodActivity'); // Import WoodActivity Model
const Wood = require('../models/Wood'); // Import Wood Model (gi·∫£ s·ª≠ b·∫°n c√≥)
const { verifyToken, isAdmin } = require('../middleware/authMiddleware'); // Middleware x√°c th·ª±c

// ‚ûï T·∫°o b·∫£n ghi ho·∫°t ƒë·ªông g·ªó m·ªõi
router.post('/', verifyToken, async (req, res) => {
  if (req.user.role !== 'admin' && req.user.role !== 'staff') { // Ho·∫∑c vai tr√≤ ph√π h·ª£p
    return res.status(403).json({ message: 'B·∫°n kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán h√†nh ƒë·ªông n√†y' });
  }

  try {
    const { farm, speciesName, date, type, quantity, unit, reason, source, destination, verifiedBy } = req.body;

    // Ki·ªÉm tra xem ID g·ªó c√≥ t·ªìn t·∫°i kh√¥ng (n·∫øu c√≥ model Wood)
    const existingWood = await Wood.findById(farm);
    if (!existingWood) {
        return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y m·ª•c g·ªó n√†y.' });
    }

    const newWoodActivity = new WoodActivity({
     wood: farm, speciesName, date, type, quantity, unit, reason, source, destination, verifiedBy
});

    const savedActivity = await newWoodActivity.save();
    res.status(201).json(savedActivity);
  } catch (err) {
    console.error('POST /api/wood-activities error:', err);
    if (err.name === 'ValidationError') {
      return res.status(400).json({ message: 'L·ªói d·ªØ li·ªáu ƒë·∫ßu v√†o', errors: err.errors });
    }
    res.status(500).json({ message: 'L·ªói server khi t·∫°o b·∫£n ghi ho·∫°t ƒë·ªông g·ªó', error: err.message });
  }
});

// üîé L·∫•y to√†n b·ªô b·∫£n ghi ho·∫°t ƒë·ªông g·ªó cho m·ªôt m·ª•c g·ªó c·ª• th·ªÉ
router.get('/:farmId', verifyToken, async (req, res) => {
  try {
    const woodActivities = await WoodActivity.find({ wood: req.params.farmId }).sort({ date: 1 });
    res.json(woodActivities);
  } catch (err) {
    console.error('GET /api/wood-activities/:farmId error:', err);
    if (err.name === 'CastError') {
      return res.status(400).json({ message: 'ID g·ªó kh√¥ng h·ª£p l·ªá.' });
    }
    res.status(500).json({ message: 'L·ªói server khi l·∫•y danh s√°ch b·∫£n ghi ho·∫°t ƒë·ªông g·ªó', error: err.message });
  }
});

// üîé L·∫•y m·ªôt b·∫£n ghi ho·∫°t ƒë·ªông g·ªó b·∫±ng ID
router.get('/detail/:id', verifyToken, async (req, res) => {
  try {
    const activity = await WoodActivity.findById(req.params.id);
    if (!activity) {
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y b·∫£n ghi ho·∫°t ƒë·ªông g·ªó' });
    }
    res.json(activity);
  } catch (err) {
    console.error('GET /api/wood-activities/detail/:id error:', err);
    if (err.name === 'CastError') {
      return res.status(400).json({ message: 'ID b·∫£n ghi ho·∫°t ƒë·ªông g·ªó kh√¥ng h·ª£p l·ªá.' });
    }
    res.status(500).json({ message: 'L·ªói server khi l·∫•y th√¥ng tin b·∫£n ghi ho·∫°t ƒë·ªông g·ªó', error: err.message });
  }
});

// ‚úèÔ∏è C·∫≠p nh·∫≠t m·ªôt b·∫£n ghi ho·∫°t ƒë·ªông g·ªó
router.put('/:id', verifyToken, async (req, res) => {
  if (req.user.role !== 'admin' && req.user.role !== 'staff') {
    return res.status(403).json({ message: 'B·∫°n kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán h√†nh ƒë·ªông n√†y' });
  }
  try {
    const updatedActivity = await WoodActivity.findByIdAndUpdate(
      req.params.id,
      req.body,
      { new: true, runValidators: true }
    );
    if (!updatedActivity) {
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y b·∫£n ghi ho·∫°t ƒë·ªông g·ªó ƒë·ªÉ c·∫≠p nh·∫≠t' });
    }
    res.json(updatedActivity);
  } catch (err) {
    console.error('PUT /api/wood-activities/:id error:', err);
    if (err.name === 'ValidationError') {
      return res.status(400).json({ message: 'L·ªói d·ªØ li·ªáu ƒë·∫ßu v√†o', errors: err.errors });
    }
    res.status(500).json({ message: 'L·ªói server khi c·∫≠p nh·∫≠t b·∫£n ghi ho·∫°t ƒë·ªông g·ªó', error: err.message });
  }
});

// ‚ùå X√≥a m·ªôt b·∫£n ghi ho·∫°t ƒë·ªông g·ªó
router.delete('/:id', verifyToken, async (req, res) => {
  if (req.user.role !== 'admin') {
    return res.status(403).json({ message: 'B·∫°n kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán h√†nh ƒë·ªông n√†y' });
  }
  try {
    const deletedActivity = await WoodActivity.findByIdAndDelete(req.params.id);
    if (!deletedActivity) {
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y b·∫£n ghi ho·∫°t ƒë·ªông g·ªó ƒë·ªÉ x√≥a' });
    }
    res.json({ message: 'X√≥a b·∫£n ghi ho·∫°t ƒë·ªông g·ªó th√†nh c√¥ng' });
  } catch (err) {
      console.error('DELETE /api/wood-activities/:id error:', err);
      if (err.name === 'CastError') {
        return res.status(400).json({ message: 'ID b·∫£n ghi ho·∫°t ƒë·ªông g·ªó kh√¥ng h·ª£p l·ªá.' });
      }
      res.status(500).json({ message: 'L·ªói server khi x√≥a b·∫£n ghi ho·∫°t ƒë·ªông g·ªó', error: err.message });
  }
});

module.exports = router;